// <auto-generated />
using System;
using DoughAssistantBackend.DataContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DoughAssistantBackend.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DoughAssistantBackend.Models.Expense", b =>
                {
                    b.Property<string>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ExpenseId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("DoughAssistantBackend.Models.MonthCurrency", b =>
                {
                    b.Property<int>("MonthCurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MonthCurrencyId"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MonthIndex")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("MonthCurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("MonthCurrencies");
                });

            modelBuilder.Entity("DoughAssistantBackend.Models.RememberMeToken", b =>
                {
                    b.Property<string>("RememberMeTokenId")
                        .HasColumnType("text");

                    b.Property<string>("HashedToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RememberMeTokenId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RememberMeTokens");
                });

            modelBuilder.Entity("DoughAssistantBackend.Models.SessionToken", b =>
                {
                    b.Property<int>("SessionTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SessionTokenId"));

                    b.Property<string>("SessionKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SessionTokenId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("SessionTokens");
                });

            modelBuilder.Entity("DoughAssistantBackend.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DoughAssistantBackend.Models.UserConfiguration", b =>
                {
                    b.Property<int>("UserConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserConfigurationId"));

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("DefaultMonthlyLimit")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserConfigurationId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserConfigurations");
                });

            modelBuilder.Entity("DoughAssistantBackend.Models.Expense", b =>
                {
                    b.HasOne("DoughAssistantBackend.Models.User", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoughAssistantBackend.Models.MonthCurrency", b =>
                {
                    b.HasOne("DoughAssistantBackend.Models.User", "User")
                        .WithMany("MonthCurrencies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoughAssistantBackend.Models.RememberMeToken", b =>
                {
                    b.HasOne("DoughAssistantBackend.Models.User", "User")
                        .WithOne("RememberMeToken")
                        .HasForeignKey("DoughAssistantBackend.Models.RememberMeToken", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoughAssistantBackend.Models.SessionToken", b =>
                {
                    b.HasOne("DoughAssistantBackend.Models.User", "User")
                        .WithOne("SessionToken")
                        .HasForeignKey("DoughAssistantBackend.Models.SessionToken", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoughAssistantBackend.Models.UserConfiguration", b =>
                {
                    b.HasOne("DoughAssistantBackend.Models.User", "User")
                        .WithOne("UserConfiguration")
                        .HasForeignKey("DoughAssistantBackend.Models.UserConfiguration", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoughAssistantBackend.Models.User", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("MonthCurrencies");

                    b.Navigation("RememberMeToken")
                        .IsRequired();

                    b.Navigation("SessionToken")
                        .IsRequired();

                    b.Navigation("UserConfiguration")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
